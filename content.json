{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"","slug":"123","date":"2018-07-12T06:59:06.864Z","updated":"2018-09-29T00:32:16.730Z","comments":true,"path":"2018/07/12/123/","link":"","permalink":"http://yoursite.com/2018/07/12/123/","excerpt":"","text":"#WannaLOL2解题 黑盒测试运行文件，看看有什么效果黑盒测试输入，限制长度，控制，提示错误之类的 判断位数，32位/64位可以通过IDA打开看看，64位只能打开64位的文件，32位只能打开32位的文件 IDA7.0他会提示错误如果打开错误 这一栏也有提示，这个文件是32位的 搜索关键字符串error判断语句在上方push为函数的开始，return为函数的结束——— 代表函数的开始 因为不是很会汇编所以我利用IDA的F5功能把他编译成C语言编译之前发现有两段花指令 花指令是程序中的无用代码，程序多它没影响，少了它也能正常运行。加花指令后，杀毒软件对木马静态反汇编时，木马的代码就不会正常显示出来，加大杀毒软件的查杀难度。绕过花指令有两种方法首先我们要设置Number of opcode bytes（操作码的字节数），我使用的是8 修改完之后就会出现以下情况其中话指令说对应的就是E8 ，扰乱了反编译的过程 以下有两种绕过方式，分别在两条话指令中操作一、首先我们选中E8 绕后打开Hex View 这样就可以定位到对应的地方F2 将他改成90 然后F2确认 我们发现E8改为90后面的数据变正常了 90：是一个单独的指令，是一个什么都不做的指令 二、第二种方法我们选中E8的位置按u（undfine） 然后选择下面的66按c（code） 变成如下情况就好像E8被注释掉了 花指令已经被我们绕过 我们选中整个函数从push开始到retn按p然后按F5 这是编译后的伪C 这一段应该简单的上面是ascii码我们把它转换回来 根据这个我们可以判断出来长度是4，第一位是1，第二位是5后面两位我们继续往下看 我把四个字符串改为c1，c2，c3，c4v10 = C3 - ‘0’; v0 = (double)v10; v10 = C1 - ‘0’; v1 = (double)v10; v10 = C2 - ‘0’; v2 = v1 / (double)v10; v10 = C4 - ‘0’; (float )&amp;v10 = (v0 - v2) (double)v10 16.0; if ( (float )&amp;v10 != 384.0 ) 我这里列出了关键部分，其他语句没有什么意义的已知C1=1，C2=5 (c3-1/5)c416.0=384.0(c3-0.2)*c4==24.0然后我们可以简单的穷举","categories":[],"tags":[]}]}